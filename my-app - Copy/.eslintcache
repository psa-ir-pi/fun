[{"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\index.js":"1","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\reportWebVitals.js":"2","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\App.js":"3","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Home.js":"4","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Navigation.js":"5","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\AllProjects.js":"6","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\EditProject.js":"7","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateProject.js":"8","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\MyProjects.js":"9","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateComment.js":"10","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\common\\CommonFunctions.js":"11","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\widgets\\RecordCount.js":"12","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\widgets\\LoadingSpinner.js":"13","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlComment.js":"14","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\SprintsTable.js":"15","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\TasksTable.js":"16","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\BranchesTable.js":"17","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\VersionsTable.js":"18","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Branch.js":"19","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CodeView.js":"20","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlSprint.js":"21","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ProjectMember.js":"22","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlTasks.js":"23","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\AssignManually.js":"24","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateTasks.js":"25","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateSprint.js":"26","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Sprint.js":"27"},{"size":517,"mtime":1652514955911,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1648789762127,"results":"30","hashOfConfig":"29"},{"size":1583,"mtime":1652886915913,"results":"31","hashOfConfig":"29"},{"size":253,"mtime":1648789762125,"results":"32","hashOfConfig":"29"},{"size":1382,"mtime":1652887237833,"results":"33","hashOfConfig":"29"},{"size":5962,"mtime":1652884027378,"results":"34","hashOfConfig":"29"},{"size":3528,"mtime":1650377608010,"results":"35","hashOfConfig":"29"},{"size":2856,"mtime":1649347821748,"results":"36","hashOfConfig":"29"},{"size":5302,"mtime":1652886605767,"results":"37","hashOfConfig":"29"},{"size":4020,"mtime":1652620363560,"results":"38","hashOfConfig":"29"},{"size":1584,"mtime":1652547424194,"results":"39","hashOfConfig":"29"},{"size":953,"mtime":1604370539666,"results":"40","hashOfConfig":"29"},{"size":568,"mtime":1603244841220,"results":"41","hashOfConfig":"29"},{"size":3701,"mtime":1652541025604,"results":"42","hashOfConfig":"29"},{"size":4533,"mtime":1652801949710,"results":"43","hashOfConfig":"29"},{"size":4354,"mtime":1652802024071,"results":"44","hashOfConfig":"29"},{"size":3741,"mtime":1652802001626,"results":"45","hashOfConfig":"29"},{"size":3873,"mtime":1652885010066,"results":"46","hashOfConfig":"29"},{"size":4828,"mtime":1652886392500,"results":"47","hashOfConfig":"29"},{"size":1960,"mtime":1652883916935,"results":"48","hashOfConfig":"29"},{"size":3351,"mtime":1652886015552,"results":"49","hashOfConfig":"29"},{"size":6657,"mtime":1652883916938,"results":"50","hashOfConfig":"29"},{"size":7786,"mtime":1652884880739,"results":"51","hashOfConfig":"29"},{"size":4146,"mtime":1652883916935,"results":"52","hashOfConfig":"29"},{"size":4069,"mtime":1652883916937,"results":"53","hashOfConfig":"29"},{"size":3341,"mtime":1652883916937,"results":"54","hashOfConfig":"29"},{"size":8906,"mtime":1652886605773,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1bhfiz6",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\index.js",[],["125","126"],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\reportWebVitals.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\App.js",["127","128"],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Home.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Navigation.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\AllProjects.js",["129","130","131"],"import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button,ButtonToolbar} from 'react-bootstrap';\r\nimport {CreateProject} from './CreateProject';\r\nimport {EditProject} from './EditProject';\r\nimport { format } from 'date-fns'\r\n\r\nexport class AllProjects extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={projects:[], createShow:false, editShow:false}\r\n        this.state2 = {tasks:[]};\r\n    }\r\n\r\n    getProjects(){\r\n        fetch(process.env.REACT_APP_API+'project')\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            for (let project of data) {\r\n                project.date = project.date.slice(0, 10);\r\n            }\r\n            this.setState({projects:data});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getProjects();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n    }\r\n\r\n    // gets all tasks assigned to project and test whether they are Uzdaryti\r\n    testIfAllTasksFinished(projectid){\r\n        fetch(process.env.REACT_APP_API+'task/')\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            this.setState({tasks:data});\r\n        });\r\n        var flag = false;\r\n        const {tasks} = this.state2\r\n        tasks.map((task)=>{\r\n            if (task.busena=='Uzdaryta')flag=true;\r\n        });\r\n        return flag;\r\n    }\r\n\r\n    // first calls a func testIfAllTasksFinished and then ask for confirmation to delete project by id\r\n    deleteProject(projectId){\r\n        const flag = this.testIfAllTasksFinished(projectId);\r\n        if(flag){\r\n            if(window.confirm('There are unfinished tasks. \\nAre you sure you want to delete the project?')){\r\n                fetch(process.env.REACT_APP_API+'project/'+projectId,{\r\n                    method:'DELETE',\r\n                    header:{'Accept':'application/json',\r\n                'Content-Type':'application/json'}\r\n                });\r\n            }\r\n        }else{\r\n            if(window.confirm('Are you sure?')){\r\n                fetch(process.env.REACT_APP_API+'project/'+projectId,{\r\n                    method:'DELETE',\r\n                    header:{'Accept':'application/json',\r\n                    'Content-Type':'application/json'}\r\n                });\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.getProjects();\r\n        }, 500);\r\n    }\r\n\r\n    render(){\r\n        const {projects, projectId,projectName, projectDate, projectDescription}=this.state;//delete projectDescription mayby\r\n        let createClose=()=>{this.setState({createShow:false})\r\n        this.getProjects();};\r\n        let editClose=()=>{this.setState({editShow:false})\r\n        this.getProjects();};\r\n        return(\r\n            <div className=\"col-lg-12  text-center\">\r\n                <h1>All projects</h1>\r\n                <Table className=\"mt-4\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Project name</th>\r\n                            <th>Project creation date</th>\r\n                            <th>Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {projects.map(proj=>\r\n                            <tr key={proj.id}>\r\n                                <td>{proj.name}</td>\r\n                                <td>{proj.date}</td>\r\n                                <td >\r\n                                        <ButtonToolbar>\r\n                                            <Button className=\"mr-2\" variant=\"info\"\r\n                                            onClick={()=>this.setState({editShow:true,\r\n                                                projectId:proj.id, projectDate:proj.date, projectName:proj.name, projectDescription:proj.description})}>\r\n                                                    Edit\r\n                                                </Button>\r\n\r\n                                                <Button className=\"mr-2\" variant=\"danger\"\r\n                                                onClick={()=>this.deleteProject(proj.id)}>\r\n                                                    Delete\r\n                                                </Button>\r\n                                                <Link to={'/ProjectMember/'+proj.id}>\r\n                                                    <Button className=\"mr-2\" variant=\"primary\">\r\n                                                        Members\r\n                                                    </Button>\r\n                                                </Link>\r\n                                                <Button className=\"mr-2\" variant=\"secondary\">\r\n                                                    Statistic\r\n                                                </Button>\r\n\r\n                                                <EditProject show={this.state.editShow}\r\n                                                onHide={editClose}\r\n                                                projectId={projectId}\r\n                                                projectName={projectName}\r\n                                                projectDescription={projectDescription}\r\n                                                projectDate={projectDate}\r\n                                                />\r\n                                        </ButtonToolbar>\r\n\r\n                                </td>\r\n\r\n                            </tr>)}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n                <ButtonToolbar>\r\n                    <Button variant='primary'\r\n                    onClick={()=>this.setState({createShow:true})}>\r\n                    Add Project</Button>\r\n\r\n                    <CreateProject show={this.state.createShow}\r\n                    onHide={createClose}/>\r\n                </ButtonToolbar>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\EditProject.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateProject.js",["132"],"import React,{Component, useState} from 'react';\r\nimport {Modal,Button, Row, Col, Form} from 'react-bootstrap';\r\n\r\nexport class CreateProject extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        fetch(process.env.REACT_APP_API+'project',{\r\n            method:'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                id:0,\r\n                name:event.target.name.value,\r\n                description:event.target.description.value\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((result)=>{\r\n            alert(result);\r\n        },\r\n        (error)=>{\r\n            alert('Failed');\r\n        })\r\n    }\r\n\r\n    render(){     \r\n        return (\r\n            <div className=\"container\">\r\n            <Modal\r\n            {...this.props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n                <Modal.Header clooseButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Add Project\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n\r\n                    <Row>\r\n                        <Col sm={6}>\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <Form.Group controlId=\"name\">\r\n                                    <Form.Label>Project Name</Form.Label>\r\n                                    <Form.Control type=\"text\" name=\"name\" required \r\n                                    placeholder=''/>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"description\">\r\n                                    <Form.Label>Project Description</Form.Label>\r\n                                    <Form.Control type=\"text\" name=\"description\" required \r\n                                    placeholder=''/>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Add Project\r\n                                    </Button>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n                \r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={this.props.onHide}>Close</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\MyProjects.js",["133","134","135"],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateComment.js",["136","137","138"],"import React,{Component, useState} from 'react';\r\nimport {Modal,Button, Row, Col, Form} from 'react-bootstrap';\r\n\r\nexport class CreateComment extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleSubmit=this.CreateComment.bind(this);\r\n    }\r\n\r\n\r\n    CreateComment(event){\r\n        event.preventDefault();\r\n        console.log(event.target.from_line.value)\r\n        if(event.target.from_line.value == \"\"){\r\n            event.target.from_line.value = -1\r\n        }\r\n        if(event.target.to_line.value == \"\"){\r\n            event.target.to_line.value = -1\r\n        }\r\n        fetch(process.env.REACT_APP_API+'comment',{\r\n            method:'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                text:event.target.text.value,\r\n                from_line:event.target.from_line.value,\r\n                to_line:event.target.to_line.value,\r\n                foreign_version:event.target.foreign_version.value,\r\n                foreign_user:event.target.foreign_user.value,\r\n\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((result)=>{\r\n            alert(result);\r\n        },\r\n        (error)=>{\r\n            alert('Failed');\r\n        })\r\n    }\r\n\r\n    render(){     \r\n        return (\r\n            <div className=\"container\">\r\n            <Modal\r\n            {...this.props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n                <Modal.Header clooseButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Add Project\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n\r\n                    <Row>\r\n                        <Col sm={6}>\r\n                            <Form onSubmit={this.CreateComment}>\r\n                                <Form.Group controlId=\"text\">\r\n                                    <Form.Label>Text</Form.Label>\r\n                                    <Form.Control type=\"text\" name=\"text\" required \r\n                                    placeholder=''/>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"from_line\">\r\n                                    <Form.Label>From line</Form.Label>\r\n                                    <Form.Control type=\"nummber\" name=\"from_line\"  \r\n                                    placeholder=''/>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"to_line\">\r\n                                    <Form.Label>To line</Form.Label>\r\n                                    <Form.Control type=\"nummber\" name=\"to_line\"\r\n                                    placeholder=''  />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"foreign_version\">\r\n                                    <Form.Control type=\"hidden\" name=\"foreign_version\" value={2}/>\r\n                                </Form.Group>   \r\n                                <Form.Group controlId=\"foreign_user\">\r\n                                    <Form.Control type=\"hidden\" name=\"foreign_user\" value={1}/>\r\n                                </Form.Group>   \r\n\r\n\r\n                                <Form.Group>\r\n                                    <Button variant=\"primary\" type=\"submit\">\r\n                                        Add Project\r\n                                    </Button>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n                \r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={this.props.onHide}>Close</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\common\\CommonFunctions.js",["139"],"import axios from \"axios\";\r\n\r\nexport function objToQueryString(obj) {\r\n\tconst keyValuePairs = [];\r\n\tfor (const key in obj) {\r\n\t\tkeyValuePairs.push(\r\n\t\t\tencodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key])\r\n\t\t);\r\n\t}\r\n\treturn keyValuePairs.join(\"&\");\r\n}\r\n\r\nexport function requestData(url, paramObject, method) {\r\n  axios.defaults.baseURL = \"http://localhost:53535/api\";\r\n\treturn axios.request({\r\n\t\turl: url + objToQueryString(paramObject),\r\n\t\tmethod: method,\r\n\t\theaders: {\r\n\t\t\tPragma: \"no-cache\"\r\n\t\t}\r\n\t})\r\n\t.then(response => {\r\n\t\treturn response;\r\n\t})\r\n\t.catch(error => {\r\n\t\treturn error;\r\n\t});\r\n}\r\n\r\nfunction sortJSONObjects(data, prop, desc) {\r\n  return data.sort(function(a, b) {\r\n    if (desc) {\r\n      return b[prop] > a[prop] ? 1 : b[prop] < a[prop] ? -1 : 0;\r\n    } else {\r\n      return a[prop] > b[prop] ? 1 : a[prop] < b[prop] ? -1 : 0;\r\n    }\r\n  });\r\n}\r\n\r\nexport function getTableDataFromJSONObject(\r\n  jsonData,\r\n  pageSize,\r\n  page,\r\n  sorted,\r\n  dataKey\r\n) {\r\n  let startIndex = 0;\r\n  let endIndex = pageSize;\r\n  if (page > 0) {\r\n    startIndex = page * pageSize;\r\n    endIndex = startIndex + pageSize;\r\n  }\r\n  //jsonData = sortJSONObjects(jsonData, sorted[0].id, sorted[0].desc);\r\n  return new Promise((resolve, reject) => {\r\n    if (jsonData) {\r\n      let rows = {\r\n        rows: [\r\n          {\r\n            [dataKey]: jsonData.slice(startIndex, endIndex)\r\n          }\r\n        ],\r\n        pages: Math.ceil(jsonData.length / pageSize),\r\n        totalRecords: jsonData.length\r\n      };\r\n      resolve(rows);\r\n    } else {\r\n      reject(\"Error\");\r\n    }\r\n  });\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\widgets\\RecordCount.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\widgets\\LoadingSpinner.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlComment.js",["140","141"],"import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n\r\nimport {Button,ButtonToolbar} from 'react-bootstrap';\r\nimport {CreateComment} from './CreateComment';\r\n\r\nexport class ControlComment extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={comments:[], createShow:false, editShow:false}\r\n    }\r\n\r\n    getAllComments(){\r\n        fetch(process.env.REACT_APP_API+'comment')\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            for (let comment of data) {\r\n                comment.date = comment.date.slice(0, 10);\r\n                if (comment.from_line == -1){\r\n                    comment.from_line = \"unspecified\"\r\n                }\r\n                if (comment.to_line == -1){\r\n                    comment.to_line = \"unspecified\"\r\n                }\r\n            }\r\n            this.setState({comments:data});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllComments();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.getAllComments();\r\n    }\r\n\r\n    deleteComment(commentId){\r\n        if(window.confirm('Are you sure?')){\r\n            fetch(process.env.REACT_APP_API+'comment/'+commentId,{\r\n                method:'DELETE',\r\n                header:{'Accept':'application/json',\r\n                'Content-Type':'application/json'}\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {comments}=this.state;\r\n        let createClose=()=>this.setState({createShow:false});\r\n        return(\r\n            <div class=\"col-lg-12  text-center\">\r\n                <h1>All comments</h1>\r\n                <Table className=\"mt-4\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Comment text</th>\r\n                            <th>Comment creation date</th>\r\n                            <th>User name</th>\r\n                            <th>Version id</th>\r\n                            <th>From line</th>\r\n                            <th>To line</th>\r\n                            <th>Project name</th>\r\n                            <th>Options</th>\r\n                            \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {comments.map(co=>\r\n                            <tr key={co.id}>\r\n                                <td>{co.text}</td>\r\n                                <td>{co.date}</td>\r\n                                <td>{co.name}</td>\r\n                                <td>{co.foreign_version}</td>\r\n                                <td>{co.from_line}</td>\r\n                                <td>{co.to_line}</td>\r\n                                <td>{co.Project_name}</td>\r\n                                <td >\r\n                                        <ButtonToolbar>\r\n                                                <Button className=\"mr-2\" variant=\"danger\"\r\n                                            onClick={()=>this.deleteComment(co.id)}>\r\n                                                    Delete\r\n                                                </Button>\r\n                                        </ButtonToolbar>\r\n\r\n                                </td>\r\n\r\n                            </tr>)}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n                <ButtonToolbar>\r\n                    <Button variant='primary'\r\n                    onClick={()=>this.setState({createShow:true})}>\r\n                    Add Comment</Button>\r\n\r\n                    <CreateComment show={this.state.createShow}\r\n                    onHide={createClose}/>\r\n                </ButtonToolbar>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\SprintsTable.js",["142"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { requestData, getTableDataFromJSONObject } from \"./common/CommonFunctions.js\";\r\nimport ReactTable from \"react-table-6\";\r\nimport RecordCount from \"./widgets/RecordCount.js\";\r\nimport \"./index.css\";\r\nimport TasksTable from \"./TasksTable.js\";                                          \r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst SprintsTable = (props) => {\r\n\r\n  const _isMounted = useRef(false);\r\n  const postTableRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [pages, setPages] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  const sort = [{\"id\": \"id\",\"desc\": false}];\r\n\r\n  \r\n  \r\n  function getSprints() {\r\n    return requestData(\r\n      \"/sprint/\" + props.Id,\r\n      {},\r\n      \"get\"\r\n    );\r\n\r\n  }\r\n  \r\n  useEffect(() => {\r\n\r\n    _isMounted.current = true;\r\n    fetchData();\r\n\r\n    return () => {\r\n      _isMounted.current = false;\r\n    }\r\n  }, []);\r\n\r\n  function fetchData(state) {\r\n    \r\n    let pageSize = state === undefined ? 5 : state.pageSize;\r\n    let page = state === undefined ? 0 : state.page;\r\n    let sorted = state === undefined ? sort : state.sorted;\r\n    setLoading(true);\r\n    \r\n    getSprints()\r\n      .then(res => {\r\n        for (let el of res.data) {\r\n          el.date = el.date.slice(0, 10);\r\n      }\r\n        getTableDataFromJSONObject(res.data, pageSize, page, sorted, \"sprints\")\r\n          .then(result => {\r\n            if (_isMounted.current) {\r\n              console.log(result)\r\n              setLoading(false);\r\n              setPages(result.pages === undefined ? 0 : result.pages);\r\n              setData(result.rows[0].sprints);\r\n              setTotalRecords(result.totalRecords);\r\n            }\r\n        })\r\n        .catch(error => {\r\n          console.warn(error);\r\n          if (_isMounted.current) {\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n    .catch(error => {\r\n      console.warn(error);\r\n      if (_isMounted.current) {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n  const history = useHistory();\r\n    const sprintPage = (id) => {\r\n      history.push(\"/sprint/\"+id)\r\n  }\r\n  return (\r\n    \r\n    <React.Fragment>\r\n    \t<div style={{ textAlign: \"center\", padding: \"35px\" }}>\r\n        <p />\r\n        <ReactTable\r\n            ref={postTableRef}\r\n            columns={[\r\n              {\r\n                Header: \"Id\",\r\n                accessor: \"id\",\r\n                width: 70,\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Name\",\r\n                accessor: \"name\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Date\",\r\n                accessor: \"date\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"View sprint\",\r\n                accessor: \"id\",\r\n                Cell: cell => (\r\n                <button className=\"btn btn-success\" \r\n                onClick={() =>sprintPage(cell.original.id)}>Kanban board\r\n                </button>\r\n                )\r\n              }\r\n            ]}\r\n            defaultSorted={[\r\n              {\r\n                id: \"id\",\r\n                desc: false\r\n              }\r\n            ]}\r\n            manual\r\n            data={data}\r\n            pages={pages}\r\n            loading={loading}\r\n            onFetchData={fetchData}\r\n            defaultPageSize={5}\r\n            className=\"-striped -highlight\"\r\n            SubComponent={row => {     \r\n              return (\r\n                \r\n                <div style={{ padding: \"10px\" }}>\r\n                  <h3>\r\n                    Tasks\r\n                  </h3>\r\n                  <TasksTable\r\n                    Id={row.original.id}\r\n                  />\r\n                </div>\r\n              );\r\n            }}      \r\n        >\r\n          {(state, makeTable) => {\r\n            return (\r\n              <RecordCount\r\n                state={state}\r\n                makeTable={makeTable}\r\n                totalRecords={totalRecords}\r\n              />\r\n            );\r\n          }}\r\n        </ReactTable>\r\n    \t</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nSprintsTable.propTypes = {\r\n  Id: PropTypes.number,\r\n};\r\n\r\nexport default SprintsTable;","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\TasksTable.js",["143"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { requestData, getTableDataFromJSONObject } from \"./common/CommonFunctions.js\";\r\nimport ReactTable from \"react-table-6\";\r\nimport RecordCount from \"./widgets/RecordCount.js\";\r\nimport \"./index.css\";\r\nimport BranchesTable from \"./BranchesTable.js\";   \r\n\r\nconst TasksTable = (props) => {\r\n\r\n  const _isMounted = useRef(false);\r\n  const postTableRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [pages, setPages] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  const sort = [{\"id\": \"id\",\"desc\": false}];\r\n\r\n  function getTasks() {\r\n    return requestData(\r\n      \"/task/\" + props.Id,\r\n      {},\r\n      \"get\"\r\n    );\r\n\r\n  }\r\n  useEffect(() => {\r\n    _isMounted.current = true;\r\n    fetchData();\r\n    return () => {\r\n      _isMounted.current = false;\r\n    }\r\n  }, []);\r\n\r\n  function fetchData(state) {\r\n    \r\n    let pageSize = state === undefined ? 5 : state.pageSize;\r\n    let page = state === undefined ? 0 : state.page;\r\n    let sorted = state === undefined ? sort : state.sorted;\r\n    setLoading(true);\r\n    \r\n    getTasks()\r\n      .then(res => {\r\n        \r\n        getTableDataFromJSONObject(res.data, pageSize, page, sorted, \"tasks\")\r\n          .then(result => {\r\n            if (_isMounted.current) {\r\n              console.log(result)\r\n              setLoading(false);\r\n              setPages(result.pages === undefined ? 0 : result.pages);\r\n              setData(result.rows[0].tasks);\r\n              setTotalRecords(result.totalRecords);\r\n            }\r\n        })\r\n        .catch(error => {\r\n          console.warn(error);\r\n          if (_isMounted.current) {\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n    .catch(error => {\r\n      console.warn(error);\r\n      if (_isMounted.current) {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    \t<div style={{ textAlign: \"center\", padding: \"35px\" }}>\r\n        <p />\r\n        <ReactTable\r\n            ref={postTableRef}\r\n            columns={[\r\n              {\r\n                Header: \"Id\",\r\n                accessor: \"id\",\r\n                width: 70,\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Name\",\r\n                accessor: \"name\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Description\",\r\n                accessor: \"description\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"State\",\r\n                accessor: \"state\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Points\",\r\n                accessor: \"points\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              }\r\n            ]}\r\n            defaultSorted={[\r\n              {\r\n                id: \"id\",\r\n                desc: false\r\n              }\r\n            ]}\r\n            manual\r\n            data={data}\r\n            pages={pages}\r\n            loading={loading}\r\n            onFetchData={fetchData}\r\n            defaultPageSize={5}\r\n            className=\"-striped -highlight\"\r\n            SubComponent={row => {     \r\n              return (\r\n                \r\n                <div style={{ padding: \"10px\" }}>\r\n                  <h3>\r\n                    Branches\r\n                  </h3>\r\n                  <BranchesTable\r\n                    Id={row.original.id}\r\n                  />\r\n                </div>\r\n              );\r\n            }}      \r\n        >\r\n          {(state, makeTable) => {\r\n            return (\r\n              <RecordCount\r\n                state={state}\r\n                makeTable={makeTable}\r\n                totalRecords={totalRecords}\r\n              />\r\n            );\r\n          }}\r\n        </ReactTable>\r\n    \t</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nTasksTable.propTypes = {\r\n  Id: PropTypes.number,\r\n};\r\n\r\nexport default TasksTable;","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\BranchesTable.js",["144"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { requestData, getTableDataFromJSONObject } from \"./common/CommonFunctions.js\";\r\nimport ReactTable from \"react-table-6\";\r\nimport RecordCount from \"./widgets/RecordCount.js\";\r\nimport \"./index.css\";\r\nimport VersionsTable from \"./VersionsTable.js\";   \r\n\r\nconst BranchesTable = (props) => {\r\n\r\n  const _isMounted = useRef(false);\r\n  const postTableRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [pages, setPages] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  const sort = [{\"id\": \"id\",\"desc\": false}];\r\n  \r\n  function getBranches() {\r\n    return requestData(\r\n      \"/branch/\" + props.Id,\r\n      {},\r\n      \"get\"\r\n    );\r\n\r\n  }\r\n  useEffect(() => {\r\n    _isMounted.current = true;\r\n    fetchData();\r\n    return () => {\r\n      _isMounted.current = false;\r\n    }\r\n  }, []);\r\n\r\n  function fetchData(state) {\r\n    let pageSize = state === undefined ? 5 : state.pageSize;\r\n    let page = state === undefined ? 0 : state.page;\r\n    let sorted = state === undefined ? sort : state.sorted;\r\n    setLoading(true);\r\n    \r\n    getBranches()\r\n      .then(res => {\r\n        getTableDataFromJSONObject(res.data, pageSize, page, sorted, \"branches\")\r\n          .then(result => {\r\n            if (_isMounted.current) {\r\n              console.log(result)\r\n              setLoading(false);\r\n              setPages(result.pages === undefined ? 0 : result.pages);\r\n              setData(result.rows[0].branches);\r\n              setTotalRecords(result.totalRecords);\r\n            }\r\n        })\r\n        .catch(error => {\r\n          console.warn(error);\r\n          if (_isMounted.current) {\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n    .catch(error => {\r\n      console.warn(error);\r\n      if (_isMounted.current) {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    \t<div style={{ textAlign: \"center\", padding: \"35px\" }}>\r\n        <p />\r\n        <ReactTable\r\n            ref={postTableRef}\r\n            columns={[\r\n              {\r\n                Header: \"Id\",\r\n                accessor: \"id\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Name\",\r\n                accessor: \"name\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              }\r\n            ]}\r\n            defaultSorted={[\r\n              {\r\n                id: \"id\",\r\n                desc: false\r\n              }\r\n            ]}\r\n            manual\r\n            data={data}\r\n            pages={pages}\r\n            loading={loading}\r\n            onFetchData={fetchData}\r\n            defaultPageSize={5}\r\n            className=\"-striped -highlight\"\r\n            SubComponent={row => {     \r\n              return (\r\n                \r\n                <div style={{ padding: \"10px\" }}>\r\n                  <h3>\r\n                    Versions\r\n                  </h3>\r\n                  <VersionsTable\r\n                    Id={row.original.id}\r\n                  />\r\n                </div>\r\n              );\r\n            }}      \r\n        >\r\n          {(state, makeTable) => {\r\n            return (\r\n              <RecordCount\r\n                state={state}\r\n                makeTable={makeTable}\r\n                totalRecords={totalRecords}\r\n              />\r\n            );\r\n          }}\r\n        </ReactTable>\r\n    \t</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nBranchesTable.propTypes = {\r\n  Id: PropTypes.number,\r\n};\r\n\r\nexport default BranchesTable;","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\VersionsTable.js",["145"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { requestData, getTableDataFromJSONObject } from \"./common/CommonFunctions.js\";\r\nimport ReactTable from \"react-table-6\";\r\nimport RecordCount from \"./widgets/RecordCount.js\";\r\nimport \"./index.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst VersionsTable = (props) => {\r\n\r\n  const _isMounted = useRef(false);\r\n  const postTableRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [pages, setPages] = useState(null);\r\n  const [data, setData] = useState([]);\r\n  const [totalRecords, setTotalRecords] = useState(null);\r\n  const sort = [{\"id\": \"id\",\"desc\": false}];\r\n\r\n  function getVersions() {\r\n    return requestData(\r\n      \"/version/\" + props.Id,\r\n      {},\r\n      \"get\"\r\n    );\r\n\r\n  }\r\n  \r\n  useEffect(() => {\r\n\r\n    _isMounted.current = true;\r\n    fetchData();\r\n    return () => {\r\n      _isMounted.current = false;\r\n    }\r\n  }, []);\r\n\r\n  function fetchData(state) {\r\n    let pageSize = state === undefined ? 5 : state.pageSize;\r\n    let page = state === undefined ? 0 : state.page;\r\n    let sorted = state === undefined ? sort : state.sorted;\r\n    setLoading(true);\r\n    \r\n    getVersions()\r\n      .then(res => {\r\n        for (let el of res.data) {\r\n          el.date = el.date.slice(0, 10);\r\n      }\r\n        getTableDataFromJSONObject(res.data, pageSize, page, sorted, \"versions\")\r\n          .then(result => {\r\n            if (_isMounted.current) {\r\n              console.log(result)\r\n              setLoading(false);\r\n              setPages(result.pages === undefined ? 0 : result.pages);\r\n              setData(result.rows[0].versions);\r\n              setTotalRecords(result.totalRecords);\r\n            }\r\n        })\r\n        .catch(error => {\r\n          console.warn(error);\r\n          if (_isMounted.current) {\r\n            setLoading(false);\r\n          }\r\n        });\r\n      })\r\n    .catch(error => {\r\n      console.warn(error);\r\n      if (_isMounted.current) {\r\n        setLoading(false);\r\n      }\r\n    });\r\n  }\r\n  const history = useHistory();\r\n    const versionPage = (id) => {\r\n      history.push(\"/CodeView/\"+id)\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n    \t<div style={{ textAlign: \"center\", padding: \"35px\" }}>\r\n        <p />\r\n        <ReactTable\r\n            ref={postTableRef}\r\n            columns={[\r\n              {\r\n                Header: \"Id\",\r\n                accessor: \"id\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"Date\",\r\n                accessor: \"date\",\r\n                className: \"LeftAlignedText\",\r\n                headerClassName: \"BoldText ColoredText\"\r\n              },\r\n              {\r\n                Header: \"View code\",\r\n                accessor: \"id\",\r\n                Cell: cell => (\r\n                <button className=\"btn btn-success\" \r\n                onClick={() =>versionPage(cell.original.id)}>Code\r\n                </button>\r\n                )\r\n              }\r\n            ]}\r\n            defaultSorted={[\r\n              {\r\n                id: \"id\",\r\n                desc: false\r\n              }\r\n            ]}\r\n            manual\r\n            data={data}\r\n            pages={pages}\r\n            loading={loading}\r\n            onFetchData={fetchData}\r\n            defaultPageSize={5}\r\n            className=\"-striped -highlight\"\r\n        >\r\n          {(state, makeTable) => {\r\n            return (\r\n              <RecordCount\r\n                state={state}\r\n                makeTable={makeTable}\r\n                totalRecords={totalRecords}\r\n              />\r\n            );\r\n          }}\r\n        </ReactTable>\r\n    \t</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nVersionsTable.propTypes = {\r\n  Id: PropTypes.number,\r\n};\r\n\r\nexport default VersionsTable;","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Branch.js",["146","147","148","149","150","151","152","153","154"],"import React,{Component} from 'react';\r\nimport ReactFlow from 'react-flow-renderer';\r\nimport { withRouter } from \"react-router\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Branch extends Component{\r\n  \r\n  static propTypes = {\r\n    match: PropTypes.object.isRequired,\r\n    location: PropTypes.object.isRequired,\r\n    history: PropTypes.object.isRequired\r\n  };\r\n    constructor(props){\r\n        super(props);\r\n        this.state={createShow:false, editShow:false,nodes:[],edges:[],id:this.props.match.params.id}\r\n    }\r\n\r\n    getVersionElementsToDisplay(id){\r\n        var nodesNew=[]\r\n        var edgesNew=[]\r\n        var allNodes = []\r\n        var dates = []\r\n        var bId = []\r\n        var layers=[]\r\n        var colors=[\"#1F45FC\", \"#00FFFF\", \"#008080\", \"#347235\",\"#4CC417\",\"#EDDA74\",\"##FFFF00\",\"#FFA62F\",\"#966F33\"]\r\n        fetch(process.env.REACT_APP_API+'version/getAll/'+id)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            var index = 0\r\n            var ai = -1\r\n            var ci = -1\r\n            for (let d of data) {\r\n              console.log('index'+index)\r\n              if(index != 0){\r\n                ai=bId.indexOf(-1)\r\n              }\r\n                if(!bId.includes(d.foreign_branch)){\r\n                    if (index != 0 && ai != -1){\r\n                      bId[ai]=d.foreign_branch\r\n                      ci=ai\r\n                    }\r\n                    else{\r\n                      bId.push(d.foreign_branch)\r\n                      if(index != 0){\r\n                        ai=Math.max(...layers)\r\n                      }\r\n                      ai+=1\r\n                      ci=ai\r\n                      if(allNodes.length == ai){\r\n                        allNodes.push([])\r\n                        dates.push([])\r\n                      }\r\n                      layers.push(ai)\r\n                    }\r\n                }\r\n                else{\r\n                    ci=bId.indexOf(d.foreign_branch)\r\n                }\r\n                allNodes[ci].push(index)\r\n                dates[ci].push(d.date)\r\n                var le = allNodes[0].length\r\n                if(ci==0 || (ci != 0 && d.date != dates[0][le-1])){\r\n                    nodesNew.push({\r\n                        id: index.toString(),\r\n                        type: 'default',\r\n                        data: { label: index.toString(), id:d.id },\r\n                        position: { x: 250+ ci*50, y: 25 + index*50 },\r\n                        style: { width: 30, height:30, borderRadius: \"50%\", backgroundColor:colors[ci]},\r\n                      })\r\n                      if(index > 0){\r\n                          const l = allNodes[ci].length\r\n                          var i=allNodes[0][allNodes[0].length-1]\r\n                          if(l != 1){\r\n                                i= allNodes[ci][l-2]\r\n                          }\r\n                        edgesNew.push({ id: 'e'+i+'-'+index, source: i.toString(), target: index.toString() })\r\n                      }\r\n                }\r\n                else{\r\n                    edgesNew.push({ id: 'e'+i+'-'+index, source: allNodes[ci][allNodes[ci].length-2].toString(), target: allNodes[0][le-1].toString() })\r\n                    var xi=layers.indexOf(ci)\r\n                    layers.splice(xi,1)\r\n                    index-=1\r\n                    allNodes[ci] = []\r\n                    dates[ci] = []\r\n                    bId[ci] = -1\r\n                }\r\n                  index+=1\r\n            }\r\n            this.setState({nodes:nodesNew});\r\n            this.setState({edges:edgesNew});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n      this.getVersionElementsToDisplay(this.state.id);\r\n    }\r\n\r\n    // componentDidUpdate(){\r\n    //     this.full();\r\n    // }\r\n\r\n    initialNodes = [\r\n        {\r\n          id: '1',\r\n          type: 'input',\r\n          data: { label: '' },\r\n          position: { x: 250, y: 25 },\r\n          style: { width: 30, height:30, borderRadius: \"50%\"},\r\n        },\r\n      \r\n        {\r\n          id: '2',\r\n          data: { label: <div>Default Node</div> },\r\n          position: { x: 100, y: 125 },\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'output',\r\n          data: { label: 'Output Node' },\r\n          position: { x: 250, y: 250 },\r\n        },\r\n      ];\r\n      \r\n      initialEdges = [\r\n        { id: 'e1-2', source: '1', target: '2' },\r\n        { id: 'e2-3', source: '2', target: '3', animated: true },\r\n      ];\r\n\r\n    render(){\r\n        const {nodes,edges}=this.state;\r\n        const {history} = this.props;\r\n        const nav = (id) => {\r\n            history.push(\"/CodeView/\"+id)\r\n        }\r\n        return(\r\n            <ReactFlow onNodeClick={(event, node) => nav(node.data.id)} nodes={nodes} edges={edges} style={{ height: 1000 }}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Branch);","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CodeView.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlSprint.js",["155"],"import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button,ButtonToolbar} from 'react-bootstrap';\r\nimport {CreateSprint} from './CreateSprint';\r\nimport { format } from 'date-fns'\r\n\r\nexport class ControlSprint extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={sprints:[], createShow:false}\r\n    }\r\n\r\n    getAllSprints(){\r\n        fetch(process.env.REACT_APP_API+'ControlSprint/'+this.props.match.params.userid)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            for (let sprint of data) {\r\n                sprint.date = sprint.date.slice(0, 10);\r\n            }\r\n            this.setState({sprints:data});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllSprints();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n    }\r\n\r\n    render(){\r\n        const sprints=this.state.sprints\r\n        let createClose=()=>{this.setState({createShow:false});\r\n            this.getAllSprints()};\r\n        return(\r\n            <div className=\"col-lg-12  text-center\">\r\n                <h1>All user sprints</h1>\r\n                <Table className=\"mt-4\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Sprint name</th>\r\n                            <th>Sprint creation date</th>\r\n                            <th>Project's</th>\r\n                            <th>Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {sprints.map(sprint=>\r\n                            <tr key={sprint.id}>\r\n                                <td>{sprint.name}</td>\r\n                                <td>{sprint.date}</td>\r\n                                <td>{sprint.projectName}</td>\r\n                                <td >\r\n                                        <ButtonToolbar>\r\n                                        <Button className=\"mr-2\" variant=\"danger\">\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button className=\"mr-2\" variant=\"danger\">\r\n                                            Delete\r\n                                        </Button>\r\n                                                <Link to={'/ControlTasks/'+sprint.id+\"/\"+sprint.name}>\r\n                                                    <Button className=\"mr-2\" variant=\"primary\">\r\n                                                        Tasks\r\n                                                    </Button>\r\n                                                </Link>\r\n                                        </ButtonToolbar>\r\n\r\n                                </td>\r\n\r\n                            </tr>)}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n                <ButtonToolbar>\r\n                    <Button variant='primary'\r\n                    onClick={()=>this.setState({createShow:true})}>\r\n                    Add Sprint</Button>\r\n\r\n                    <CreateSprint show={this.state.createShow}\r\n                    onHide={createClose}\r\n                    userid={this.props.match.params.userid}\r\n                    />\r\n                </ButtonToolbar>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ProjectMember.js",["156","157","158"],"import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport {Button,ButtonToolbar,Form,Row,Col} from 'react-bootstrap';\r\n\r\nexport class ProjectMember extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={members:[],availableUser:[],projectid:this.props.match.params.id,specialization:[{id:1, name:'Tester'},{id:2, name:'Back end'},{id:3, name:'Front end'},{id:4, name:'Designer'}]};\r\n        this.addUserToTeam=this.addUserToTeam.bind(this);\r\n    }\r\n\r\n    getInfo(){\r\n        fetch(process.env.REACT_APP_API+'projectMember/'+this.state.projectid)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            this.setState({members:data});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getInfo();\r\n        this.getUsersNotInProject();\r\n    }\r\n\r\n    // gets all tasks assigned to team member and test whether they are closed\r\n    checkTasks(memberId){\r\n        const tasks=[];\r\n        fetch(process.env.REACT_APP_API+'task/TeamMemberTasks/'+memberId)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            this.tasks=data;\r\n        });\r\n        var flag = false;\r\n        tasks.map(task=>{\r\n            if (task.state != 3)flag=true;\r\n        });\r\n        return flag;\r\n    }\r\n\r\n    getUsersNotInProject(){\r\n        fetch(process.env.REACT_APP_API+'projectMember/GetNonParticipants/'+this.state.projectid)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            this.setState({availableUser:data});\r\n        });\r\n    }\r\n\r\n    // first calls a func testIfAllTasksFinished and then ask for confirmation to delete project by id\r\n    deleteMember(memberId){\r\n        const flag = this.checkTasks(memberId);\r\n        if(flag){\r\n            if(window.confirm('There are unfinished tasks. \\nAre you sure you want to delete the project?')){\r\n                fetch(process.env.REACT_APP_API+'projectMember/'+memberId,{\r\n                    method:'DELETE',\r\n                    header:{'Accept':'application/json',\r\n                'Content-Type':'application/json'}\r\n                })\r\n                .then(res=>res.json())\r\n                .then((result)=>{\r\n                    alert(result);\r\n                });  \r\n            }\r\n        }else{\r\n            if(window.confirm('Are you sure?')){\r\n                fetch(process.env.REACT_APP_API+'projectMember/'+memberId,{\r\n                    method:'DELETE',\r\n                    header:{'Accept':'application/json',\r\n                    'Content-Type':'application/json'}\r\n                })\r\n                .then(res=>res.json())\r\n                .then((result)=>{\r\n                    alert(result);\r\n                });  \r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            this.getInfo();\r\n            this.getUsersNotInProject();\r\n        }, 500);\r\n        \r\n\r\n    }\r\n\r\n    addUserToTeam(event){\r\n        const projid = this.state.projectid;\r\n        event.preventDefault();\r\n        fetch(process.env.REACT_APP_API+'projectmember',{\r\n            method:'POST',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                specialization:event.target.specialization.value,\r\n                foreign_user:event.target.userid.value,\r\n                foreign_project:projid\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((result)=>{\r\n            alert(result);\r\n        },\r\n        (error)=>{\r\n            alert('Failed');\r\n        })\r\n        setTimeout(() => {\r\n            this.getInfo();\r\n            this.getUsersNotInProject();\r\n        }, 500);\r\n    }\r\n\r\n    render(){\r\n        const {members,availableUser,projectid,specialization}=this.state;//delete projectDescription mayby\r\n        return(\r\n            <div className=\"col-lg-12  text-center\">\r\n                <h1>All projects members</h1>\r\n                <Table className=\"mt-4\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Member</th>\r\n                            <th>Member Specialization</th>\r\n                            <th>Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {members.map(mem=>\r\n                            <tr key={mem.id}>\r\n                                <td>{mem.name}</td>\r\n                                <td>{mem.specialization}</td>\r\n                                <td >\r\n                                        <ButtonToolbar>\r\n                                                <Button className=\"mr-2\" variant=\"danger\"\r\n                                                onClick={()=>this.deleteMember(mem.id)}>\r\n                                                    Delete\r\n                                                </Button>\r\n                                        </ButtonToolbar>\r\n\r\n                                </td>\r\n\r\n                            </tr>)}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n                <Form onSubmit={this.addUserToTeam}>\r\n                    <Row >\r\n                        <Col>\r\n                            <Form.Group  controlId=\"userid\">\r\n                                <Form.Label>User</Form.Label>\r\n                                <Form.Control as=\"select\" required>\r\n                                    {availableUser.map(user =>\r\n                                        <option key={user.id} value={user.id}>{user.name}</option>\r\n                                    )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group  controlId=\"specialization\">\r\n                                <Form.Label>User's specialization</Form.Label>\r\n                                <Form.Control as=\"select\" required>\r\n                                    {specialization.map(spec =>\r\n                                        <option key={spec.id} value={spec.id}>{spec.name}</option>\r\n                                    )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Form.Group >\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Add user\r\n                        </Button>\r\n                    </Form.Group>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\ControlTasks.js",["159","160","161"],"import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport {Button,ButtonToolbar} from 'react-bootstrap';\r\nimport {CreateTasks} from './CreateTasks';\r\nimport { AssignManually } from './AssignManually';\r\n\r\nexport class ControlTasks extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={tasks:[], createShow:false,assignShow:false}\r\n    }\r\n\r\n    getAllTasks(){\r\n        fetch(process.env.REACT_APP_API+'ControlTasks/'+this.props.match.params.sprintid)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            for (let task of data) {\r\n                task.creation_date = task.creation_date.slice(0, 10);\r\n                if(task.closing_date != null){\r\n                    task.closing_date = task.closing_date.slice(0, 10);\r\n                }\r\n            }\r\n            this.setState({tasks:data});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getAllTasks();\r\n    }\r\n\r\n    async automaticAssignment(task){\r\n        const projMembers=\r\n        await fetch(process.env.REACT_APP_API+'ControlTasks/GetSpecializedMembers/'+task.id)\r\n        .then(response=>response.json())\r\n        var specialist=[];\r\n        for(const member of projMembers){\r\n            if(member.specialization == task.type){\r\n                specialist.push(member);\r\n            }\r\n        }\r\n        if(specialist.length==0){\r\n            alert(\"There are no members with same specialization!\");\r\n        }\r\n        else{\r\n            var availableMembers = [];\r\n            for(const member of specialist){\r\n                const maxP = this.findMemberMaxPoints(member);\r\n                const usersP=this.findMemberOccupiedPoints(member);\r\n                const maxPoints = await maxP;\r\n                const usersPoints = await usersP;\r\n                console.dir({maxPoints,usersPoints,member})\r\n                const leftPoints = this.findMemberFreePointTotal(maxPoints,usersPoints);\r\n                if(leftPoints >= task.points){\r\n                    availableMembers.push({user:member,leftP:leftPoints});\r\n                }\r\n            }\r\n            if(availableMembers.length==0){\r\n                alert(\"There are no members capable on taiking the tasks \\ndue to not enough points left\");\r\n            }\r\n            else{\r\n                \r\n                while(availableMembers.length>0){\r\n                    const choosen = this.selectMember(availableMembers);\r\n                    if(window.confirm('User\\'s name:'+choosen.user.name+'\\nUser\\'s leftover points:'+choosen.leftP+\"\\nMembers left to choose from:\"+availableMembers.length)){\r\n                        fetch(process.env.REACT_APP_API+'ControlTasks/AddMemberToTask',{\r\n                            method:'PUT',\r\n                            headers:{\r\n                                'Accept':'application/json',\r\n                                'Content-Type':'application/json'\r\n                            },\r\n                            body:JSON.stringify({\r\n                                id:task.id,\r\n                                foreign_Team_member:choosen.user.id\r\n                            })\r\n                        })\r\n                        .then(res=>res.json())\r\n                        .then((result)=>{\r\n                            alert(result);\r\n                        },\r\n                        (error)=>{\r\n                            alert('Failed');\r\n                        });\r\n                        return;\r\n                    }else{\r\n                        availableMembers.splice(availableMembers.indexOf(choosen), 1);\r\n                    }\r\n                }\r\n                alert(\"no members left!\")\r\n            }\r\n        }\r\n    }\r\n\r\n    async findMemberMaxPoints(member){\r\n        return member.max_points;\r\n    }\r\n    selectMember(members){\r\n        var choosenOne={};\r\n        var maxP =0;\r\n        for(const mem of members){\r\n            if (mem.leftP>maxP){\r\n                choosenOne = mem;\r\n                maxP=mem.leftP;\r\n            }\r\n        }\r\n        return choosenOne;\r\n    }\r\n    async findMemberOccupiedPoints(member){\r\n        const usersPoints=\r\n        await fetch(process.env.REACT_APP_API+'ControlTasks/GetUsersPoints/'+member.foreign_user)\r\n        .then(response=>response.json());\r\n        var pointsUsed = 0;\r\n        for(const point of usersPoints){\r\n            pointsUsed += point.points\r\n        }\r\n        return pointsUsed;\r\n    }\r\n    findMemberFreePointTotal(max,allPoints){\r\n        return max-allPoints;\r\n    }\r\n\r\n    render(){\r\n        const tasks=this.state.tasks\r\n        let createClose=()=>{this.setState({createShow:false});\r\n            this.getAllTasks()};\r\n        let assignClose=()=>{this.setState({assignShow:false});\r\n            this.getAllTasks()};\r\n        return(\r\n            <div className=\"col-lg-12  text-center\">\r\n                <h1>Tasks assigned to sprint {this.props.match.params.sprintName}</h1>\r\n                <Table className=\"mt-4\" striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Task name</th>\r\n                            <th>Task's description</th>\r\n                            <th>Task state</th>\r\n                            <th>Task's closing date</th>\r\n                            <th>Assigned member</th>\r\n                            <th>Options</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tasks.map(task=>\r\n                            <tr key={task.id}>\r\n                                <td>{task.name}</td>\r\n                                <td>{task.description}</td>\r\n                                <td>{task.state}</td>\r\n                                <td>{task.closing_date}</td>\r\n                                <td>{task.userName}</td>\r\n                                <td >\r\n                                        <ButtonToolbar>\r\n                                        <Button className=\"mr-2\" variant=\"danger\">\r\n                                            Edit\r\n                                        </Button>\r\n                                        <Button className=\"mr-2\" variant=\"danger\">\r\n                                            Delete\r\n                                        </Button>\r\n                                        <Button variant='primary'\r\n                                        onClick={()=>this.setState({assignShow:true})}>\r\n                                        Assign member manually</Button>\r\n\r\n                                        <AssignManually show={this.state.assignShow}\r\n                                        onHide={assignClose}\r\n                                        task={task}\r\n                                        />\r\n                                        <Button className=\"mr-2\" variant=\"primary\"\r\n                                        onClick={()=>{this.automaticAssignment(task);this.getAllTasks()}}>\r\n                                            Assign task automaticly  \r\n                                        </Button>\r\n                                        </ButtonToolbar>\r\n                                </td>\r\n\r\n                            </tr>)}\r\n                    </tbody>\r\n\r\n                </Table>\r\n\r\n                <ButtonToolbar>\r\n                    <Button variant='primary'\r\n                    onClick={()=>this.setState({createShow:true})}>\r\n                    Add Task</Button>\r\n\r\n                    <CreateTasks show={this.state.createShow}\r\n                    onHide={createClose}\r\n                    sprintid={this.props.match.params.sprintid}\r\n                    />\r\n                </ButtonToolbar>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\AssignManually.js",["162","163"],"import React,{Component} from 'react';\r\nimport {Modal,Button, Row, Col, Form} from 'react-bootstrap';\r\n\r\nexport class AssignManually extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.assign=this.assign.bind(this);\r\n        this.state={members:[],available:[]};\r\n    }\r\n\r\n    getMembers(){\r\n        fetch(process.env.REACT_APP_API+'AssignManually/'+this.props.task.id)\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            this.setState({members:data});\r\n        });\r\n    }\r\n    componentDidMount(){\r\n        this.getMembers();\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.show !== this.props.show){\r\n            this.checkMembers();\r\n        }\r\n    }\r\n\r\n    async checkMembers(){\r\n        var specialist=[];\r\n        for(const member of this.state.members){\r\n            if(member.specialization == this.props.task.type){\r\n                specialist.push(member);\r\n            }\r\n        }\r\n        var availableMembers = [];\r\n        for(const member of specialist){\r\n            const maxPoints = member.max_points;\r\n            var usersPoints=[];\r\n            await fetch(process.env.REACT_APP_API+'AssignManually/GetUsersPoints/'+member.foreign_user)\r\n            .then(response=>response.json())\r\n            .then(data=>{\r\n                usersPoints=data;\r\n            });\r\n            var pointsUsed = 0;\r\n            for(const point of usersPoints){\r\n                pointsUsed += point.points\r\n            }\r\n            const leftPoints = maxPoints-pointsUsed;\r\n            if(leftPoints >= this.props.task.points){\r\n                availableMembers.push({user:member,leftP:leftPoints});\r\n            }\r\n        }\r\n        this.setState({available:availableMembers});\r\n    }\r\n\r\n    assign(event){\r\n        event.preventDefault();\r\n        fetch(process.env.REACT_APP_API+'AssignManually',{\r\n            method:'PUT',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                id:this.props.task.id,\r\n                foreign_Team_member:event.target.memberid.value\r\n            })\r\n        })\r\n        .then(res=>res.json())\r\n        .then((result)=>{\r\n            alert(result);\r\n        },\r\n        (error)=>{\r\n            alert('Failed');\r\n        });\r\n    }\r\n\r\n    render(){    \r\n\r\n        return (\r\n            <div className=\"container\">\r\n            <Modal\r\n            {...this.props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n                <Modal.Header >\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Choose member for task\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n\r\n                    <Row>\r\n                        <Col sm={6}>\r\n                            <Form onSubmit={this.assign}>\r\n                                <Form.Group  controlId=\"memberid\">\r\n                                <Form.Label>User</Form.Label>\r\n                                <Form.Control as=\"select\" required>\r\n                                    {this.state.available.map(mem =>\r\n                                        <option key={mem.user.id} value={mem.user.id}>{mem.user.name}</option>\r\n                                    )}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\">\r\n                                    Assign member to task\r\n                                </Button>\r\n                            </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Body>\r\n                \r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={this.props.onHide}>Close</Button>\r\n                </Modal.Footer>\r\n\r\n            </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateTasks.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\CreateSprint.js",[],"C:\\Users\\mante\\OneDrive\\Stalinis kompiuteris\\GIT\\fun\\my-app - Copy\\src\\Sprint.js",["164","165","166","167","168","169","170","171","172","173"],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":1,"column":8,"nodeType":"180","messageId":"181","endLine":1,"endColumn":12},{"ruleId":"178","severity":1,"message":"182","line":16,"column":17,"nodeType":"180","messageId":"181","endLine":16,"endColumn":25},{"ruleId":"178","severity":1,"message":"183","line":7,"column":10,"nodeType":"180","messageId":"181","endLine":7,"endColumn":16},{"ruleId":"184","severity":1,"message":"185","line":44,"column":25,"nodeType":"186","messageId":"187","endLine":44,"endColumn":27},{"ruleId":"188","severity":1,"message":"189","line":45,"column":28,"nodeType":"190","messageId":"191","endLine":45,"endColumn":30},{"ruleId":"178","severity":1,"message":"182","line":1,"column":26,"nodeType":"180","messageId":"181","endLine":1,"endColumn":34},{"ruleId":"178","severity":1,"message":"192","line":13,"column":9,"nodeType":"180","messageId":"181","endLine":13,"endColumn":15},{"ruleId":"178","severity":1,"message":"193","line":32,"column":10,"nodeType":"180","messageId":"181","endLine":32,"endColumn":20},{"ruleId":"178","severity":1,"message":"194","line":93,"column":7,"nodeType":"180","messageId":"181","endLine":93,"endColumn":18},{"ruleId":"178","severity":1,"message":"182","line":1,"column":26,"nodeType":"180","messageId":"181","endLine":1,"endColumn":34},{"ruleId":"188","severity":1,"message":"189","line":14,"column":41,"nodeType":"190","messageId":"191","endLine":14,"endColumn":43},{"ruleId":"188","severity":1,"message":"189","line":17,"column":39,"nodeType":"190","messageId":"191","endLine":17,"endColumn":41},{"ruleId":"178","severity":1,"message":"195","line":30,"column":10,"nodeType":"180","messageId":"181","endLine":30,"endColumn":25},{"ruleId":"188","severity":1,"message":"189","line":20,"column":39,"nodeType":"190","messageId":"191","endLine":20,"endColumn":41},{"ruleId":"188","severity":1,"message":"189","line":23,"column":37,"nodeType":"190","messageId":"191","endLine":23,"endColumn":39},{"ruleId":"196","severity":1,"message":"197","line":40,"column":6,"nodeType":"198","endLine":40,"endColumn":8,"suggestions":"199"},{"ruleId":"196","severity":1,"message":"197","line":33,"column":6,"nodeType":"198","endLine":33,"endColumn":8,"suggestions":"200"},{"ruleId":"196","severity":1,"message":"197","line":33,"column":6,"nodeType":"198","endLine":33,"endColumn":8,"suggestions":"201"},{"ruleId":"196","severity":1,"message":"197","line":37,"column":6,"nodeType":"198","endLine":37,"endColumn":8,"suggestions":"202"},{"ruleId":"188","severity":1,"message":"203","line":34,"column":24,"nodeType":"190","messageId":"191","endLine":34,"endColumn":26},{"ruleId":"188","severity":1,"message":"203","line":38,"column":31,"nodeType":"190","messageId":"191","endLine":38,"endColumn":33},{"ruleId":"188","severity":1,"message":"203","line":38,"column":42,"nodeType":"190","messageId":"191","endLine":38,"endColumn":44},{"ruleId":"188","severity":1,"message":"203","line":44,"column":32,"nodeType":"190","messageId":"191","endLine":44,"endColumn":34},{"ruleId":"188","severity":1,"message":"189","line":49,"column":42,"nodeType":"190","messageId":"191","endLine":49,"endColumn":44},{"ruleId":"188","severity":1,"message":"189","line":62,"column":22,"nodeType":"190","messageId":"191","endLine":62,"endColumn":24},{"ruleId":"188","severity":1,"message":"203","line":62,"column":33,"nodeType":"190","messageId":"191","endLine":62,"endColumn":35},{"ruleId":"188","severity":1,"message":"203","line":62,"column":48,"nodeType":"190","messageId":"191","endLine":62,"endColumn":50},{"ruleId":"188","severity":1,"message":"203","line":73,"column":32,"nodeType":"190","messageId":"191","endLine":73,"endColumn":34},{"ruleId":"178","severity":1,"message":"183","line":6,"column":10,"nodeType":"180","messageId":"181","endLine":6,"endColumn":16},{"ruleId":"184","severity":1,"message":"185","line":35,"column":23,"nodeType":"186","messageId":"187","endLine":35,"endColumn":25},{"ruleId":"188","severity":1,"message":"203","line":36,"column":28,"nodeType":"190","messageId":"191","endLine":36,"endColumn":30},{"ruleId":"178","severity":1,"message":"204","line":114,"column":38,"nodeType":"180","messageId":"181","endLine":114,"endColumn":47},{"ruleId":"188","severity":1,"message":"189","line":38,"column":38,"nodeType":"190","messageId":"191","endLine":38,"endColumn":40},{"ruleId":"188","severity":1,"message":"189","line":42,"column":29,"nodeType":"190","messageId":"191","endLine":42,"endColumn":31},{"ruleId":"188","severity":1,"message":"189","line":58,"column":39,"nodeType":"190","messageId":"191","endLine":58,"endColumn":41},{"ruleId":"188","severity":1,"message":"189","line":30,"column":38,"nodeType":"190","messageId":"191","endLine":30,"endColumn":40},{"ruleId":"205","severity":1,"message":"206","line":40,"column":19,"nodeType":"186","messageId":"207","endLine":42,"endColumn":14},{"ruleId":"178","severity":1,"message":"208","line":2,"column":9,"nodeType":"180","messageId":"181","endLine":2,"endColumn":14},{"ruleId":"178","severity":1,"message":"209","line":3,"column":9,"nodeType":"180","messageId":"181","endLine":3,"endColumn":15},{"ruleId":"178","severity":1,"message":"210","line":3,"column":16,"nodeType":"180","messageId":"181","endLine":3,"endColumn":29},{"ruleId":"188","severity":1,"message":"203","line":19,"column":31,"nodeType":"190","messageId":"191","endLine":19,"endColumn":33},{"ruleId":"211","severity":1,"message":"212","line":87,"column":17,"nodeType":"213","messageId":"214","endLine":100,"endColumn":18},{"ruleId":"215","severity":1,"message":"216","line":103,"column":17,"nodeType":"217","messageId":"218","endLine":106,"endColumn":18,"fix":"219"},{"ruleId":"215","severity":1,"message":"220","line":107,"column":17,"nodeType":"217","messageId":"218","endLine":110,"endColumn":18,"fix":"221"},{"ruleId":"215","severity":1,"message":"222","line":112,"column":17,"nodeType":"217","messageId":"218","endLine":115,"endColumn":18,"fix":"223"},{"ruleId":"215","severity":1,"message":"224","line":116,"column":17,"nodeType":"217","messageId":"218","endLine":119,"endColumn":18,"fix":"225"},{"ruleId":"178","severity":1,"message":"226","line":129,"column":16,"nodeType":"180","messageId":"181","endLine":129,"endColumn":21},"no-native-reassign",["227"],"no-negated-in-lhs",["228"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'format' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Branch' is defined but never used.","'branchShow' is assigned a value but never used.","'branchClose' is assigned a value but never used.","'sortJSONObjects' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["229"],["230"],["231"],["232"],"Expected '!==' and instead saw '!='.","'projectid' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'usersPoints'.","unsafeRefs","'Table' is defined but never used.","'Button' is defined but never used.","'ButtonToolbar' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-useless-computed-key","Unnecessarily computed property ['1'] found.","Property","unnecessarilyComputedProperty",{"range":"233","text":"234"},"Unnecessarily computed property ['2'] found.",{"range":"235","text":"236"},"Unnecessarily computed property ['3'] found.",{"range":"237","text":"238"},"Unnecessarily computed property ['4'] found.",{"range":"239","text":"240"},"'tasks' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"241","fix":"242"},{"desc":"241","fix":"243"},{"desc":"241","fix":"244"},{"desc":"241","fix":"245"},[3405,3410],"'1'",[3518,3523],"'2'",[3654,3659],"'3'",[3766,3771],"'4'","Update the dependencies array to be: [fetchData]",{"range":"246","text":"247"},{"range":"248","text":"247"},{"range":"249","text":"247"},{"range":"250","text":"247"},[1069,1071],"[fetchData]",[964,966],[974,976],[979,981]]